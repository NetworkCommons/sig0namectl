#!/bin/bash
#
# Sends DNS-SD updates for domain browsing setup
#------------------------------------------------------------------------------


# load helpful functions
for i in functions/*.sh
do
        . ${i}
        [[ -n ${DEBUG_SOURCED} ]] && echo "Sourced ${PWD}/$i ..."
done

set_vars

#------------------------------------------------------------------------------
# test

NEW_SUBZONE=${NEW_SUBZONE:-""}

# select zone or subdomain within zone
if [[ -n ${NEW_SUBZONE} ]]; then
        DNSSD_DOMAIN="${NEW_SUBZONE}.${ZONE}"
else
	DNSSD_DOMAIN="${ZONE}"
fi

SIG0_KEY_FQDN=${SIG0_KEY_FQDN:-${DNSSD_DOMAIN}}

# Form NSUPDATE input
#
[[ ! -n ${NSUPDATE_SIG0_KEYID} ]] && get_sig0_keyid NSUPDATE_SIG0_KEYID ${SIG0_KEY_FQDN} ${NSUPDATE_SIG0_KEYPATH}
# form SIG0 private auth key param
if [[ -n ${NSUPDATE_SIG0_KEY} ]]; then
	NSUPDATE_PARAM="-k ${NSUPDATE_SIG0_KEYPATH}/${NSUPDATE_SIG0_KEYID}.key"
else
	NSUPDATE_PARAM=""
fi

# explicitly set server to send update to
NSUPDATE_SET_SERVER="server ${ZONE_SOA_MASTER}"

# generate nsupdate precondition to update (to avoid double entries)
# TODO test whether multiple prereqs work ...
# for now, just test for existance of lb._dns-sd._udp. in DNS_DOMAIN
NSUPDATE_ACTION=${NSUPDATE_ACTION:-"add"}
if [ "${NSUPDATE_ACTION}" == "add" ]; then
	NSUPDATE_PRECONDITION_SET="nxrrset"
else
	NSUPDATE_PRECONDITION_SET="yxrrset"
fi
NSUPDATE_PRECONDITION="prereq ${NSUPDATE_PRECONDITION_SET} lb._dns-sd._udp.${DNSSD_DOMAIN}. IN PTR"

# set RR TTLs
NSUPDATE_TTL="600"

# define DNS RR updates
NSUPDATE_ITEM_DNS_SD_LB="update ${NSUPDATE_ACTION} lb._dns-sd._udp.${DNSSD_DOMAIN} ${NSUPDATE_TTL} PTR ${DNSSD_DOMAIN}."
NSUPDATE_ITEM_DNS_SD_DB="update ${NSUPDATE_ACTION} db._dns-sd._udp.${DNSSD_DOMAIN} ${NSUPDATE_TTL} PTR ${DNSSD_DOMAIN}."
NSUPDATE_ITEM_DNS_SD_B="update ${NSUPDATE_ACTION}  b._dns-sd._udp.${DNSSD_DOMAIN} ${NSUPDATE_TTL} PTR ${DNSSD_DOMAIN}."
NSUPDATE_ITEM_DNS_SD_DR="update ${NSUPDATE_ACTION} dr._dns-sd._udp.${DNSSD_DOMAIN} ${NSUPDATE_TTL} PTR ${DNSSD_DOMAIN}."
NSUPDATE_ITEM_DNS_SD_R="update ${NSUPDATE_ACTION}  r._dns-sd._udp.${DNSSD_DOMAIN} ${NSUPDATE_TTL} PTR ${DNSSD_DOMAIN}."
if [[ -n ${DEBUG} ]]; then
	echo "---DEBUG"
	echo "SCRIPT_NAME		=	${SCRIPT_NAME}"
	echo "ZONE 			=	${ZONE}"
	echo "NEW_SUBZONE 		=	${NEW_SUBZONE}"
	echo "ZONE_SOA_MASTER 	=	${ZONE_SOA_MASTER}"
	echo
	echo "DEBUG: nsupdate settings"
	echo
	echo "  NSUPDATE_SET_SERVER       = ${NSUPDATE_SET_SERVER}"
	echo "  NSUPDATE_ACTION           = ${NSUPDATE_ACTION}"
	echo "  NSUPDATE_PRECONDITION_SET = ${NSUPDATE_PRECONDITION_SET}"
	echo 
	echo "DEBUG: nsupdate commands to send"
	echo
	echo "NSUPDATE_SET_SERVER       = ${NSUPDATE_SET_SERVER}"
	echo "NSUPDATE_PRECONDITION     = ${NSUPDATE_PRECONDITION}"
	echo "NSUPDATE_ITEM_DNS_SD_LB   = ${NSUPDATE_ITEM_DNS_SD_LB}"
	echo "NSUPDATE_ITEM_DNS_SD_DB   = ${NSUPDATE_ITEM_DNS_SD_DB}"
	echo "NSUPDATE_ITEM_DNS_SD_B    = ${NSUPDATE_ITEM_DNS_SD_B}"
	echo "NSUPDATE_ITEM_DNS_SD_DR   = ${NSUPDATE_ITEM_DNS_SD_DR}"
	echo "NSUPDATE_ITEM_DNS_SD_DR   = ${NSUPDATE_ITEM_DNS_SD_DR}"
fi

# send DNS updates via nsupdate
#
cat <<EOF | nsupdate ${NSUPDATE_PARAM}
${NSUPDATE_SET_SERVER}
${NSUPDATE_PRECONDITION}
${NSUPDATE_ITEM_DNS_SD_LB}
${NSUPDATE_ITEM_DNS_SD_DB}
${NSUPDATE_ITEM_DNS_SD_B}
${NSUPDATE_ITEM_DNS_SD_DR}
${NSUPDATE_ITEM_DNS_SD_R}
send
quit
EOF
DIG_QUERY_PARAM="+short"
for word in b lb db dr r _services
do
	echo "dig ${DIG_QUERY_PARAM} PTR ${word}._dns-sd._udp.${DNSSD_DOMAIN}."
	dig ${DIG_QUERY_PARAM} PTR ${word}._dns-sd._udp.${DNSSD_DOMAIN}.
done
